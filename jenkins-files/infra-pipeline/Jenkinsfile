pipeline {
    agent any
        environment {
        // setting aws credentials
        AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
        AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
    }
    parameters {
        choice(
            // define two actions to choose from
            name: 'TerraformAction',
            choices: ['apply','destroy'],
            description: 'Select the terraform action to apply or to destroy infrastructure'
        )
    }

    stages {
        stage('Checkout') {
            steps {
                // Get some code from a GitHub repository
                git branch: 'main', url: 'https://github.com/mennahasan7/final-project.git'
        }
        }

        stage('Terraform Init') {
            steps {
                script {
                    sh "terraform init"
                
                }
            }
        }

        stage('Terraform action') {
            steps {
                script {
                    def action = params.TerraformAction
                    if (action == 'apply') {
                        sh 'terraform apply -auto-approve'
                        } 
                    else if (action == 'destroy') {
                        sh 'terraform destroy -auto-approve'
                        }
                    else {
                         error("Invalid choice for 'TerraformCommand' parameter. Expected 'apply' or 'destroy', but got '${action}'")
                        }
                }
            }
        }

    }
    post {
        success {
            script {
                // trigger the second pipeline at terraform apply
                if (params.TerraformAction == 'apply') {
                    build job: 'deployment'
                }
            }
        }
        failure {
            echo "build Failed!!"
        }
    }
    
}
